<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extensions=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Recognizers.Postal
{
    /// <summary>Database of countries and states/territories/provinces.</summary>
    public static partial class PostalData
    {
	    /// <summary>The map of territories/states/provinces</summary>
	    public static readonly Dictionary<string, Dictionary<string, string>> Provinces = new Dictionary<string, Dictionary<string, string>>(StringComparer.OrdinalIgnoreCase)
		{
<# foreach (var country in Provinces()) { #>
           { "<#=country.Key#>", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
               {
<#	  foreach (var province in country.Value) { #>
                   { "<#=province.Key#>", "<#=province.Value#>" },
<#    } #>
               }
           },
<# } #>
        };

	    /// <summary>The map of countries and country codes.</summary>
	    public static readonly Dictionary<string, string> Countries = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
		{
<# foreach (var x in Countries()) { #>
           { "<#=x.Key#>", "<#=x.Value#>" },
<# } #>
        };
    }
}
<#+
string FetchCountries()
{
	using (var web = new WebClient())
	{
		return web.DownloadString(new Uri("http://country.io/names.json"));
	}
}
Dictionary<string, string> Countries()
{
    var root = this.Host.ResolvePath(".");
	var path = Path.Combine(root, "countries.json");
	if (!File.Exists(path))
		File.WriteAllText(path, FetchCountries());
	var countries = File.ReadAllText(path)
						.Split(new[] { '\r', '\n', ':', '"', '{', '}' }, StringSplitOptions.RemoveEmptyEntries);
	var map = new Dictionary<string, string>();
	for (int i = 0; i < countries.Length; i += 4)
	{
		map[countries[i]] = countries[i+2];
		map[countries[i+2]] = countries[i+2];
	}
	return map;
}
Dictionary<string, Dictionary<string, string>> Provinces()
{
	//from: https://www.cbp.gov/document/guidance/international-stateprovince-codes
	var provinces = File.ReadAllLines(this.Host.ResolvePath("provinces.csv"))
						.Select(x => x.Split(new[] { ',' }, StringSplitOptions.None));
	var countries = Countries();
	var states = new Dictionary<string, Dictionary<string, string>>(StringComparer.OrdinalIgnoreCase);
	foreach (var province in provinces)
	{
		var name = countries[province[0]];
		if (!states.TryGetValue(name, out var country))
			country = states[name] = new Dictionary<string, string>();
		if (country.ContainsKey(province[1]))
			throw new Exception($"{province[0]} has a duplicate province {province[1]}, {province[2]}.");
		country.Add(province[1], province [2]);
		if (!country.ContainsKey(province[2]))
			country.Add(province[2], province [2]);
	}
	return states;
}
#>